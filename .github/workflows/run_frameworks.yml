# Workflow (triggered on requirement/code changes only):
# if changes *only* local to frameworks:
#   - run validate for those changed frameworks immediately
# if changes affect shared code:
#   - run a constant predictor to validate changed code
#   - if constant predictor successful, also run each automl framework
name: IntegrationTests

on:
  pull_request:
    paths:
      - 'amlb/**'
      - 'frameworks/**'
      - '.github/**'
      - 'runbenchmark.py'
      - 'requirements.txt'


jobs:
  framework_changes:
    name: Detect Changed AutoML Frameworks
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.frameworks-diff.outputs.changed_frameworks }}
      output2: ${{ steps.frameworks-diff.outputs.$frameworks_changed }}
    steps:
    - uses: actions/checkout@v2
    - name: pull base branch
      run: |
        git fetch --all
        git checkout -b $GITHUB_BASE_REF origin/$GITHUB_BASE_REF
        git checkout $GITHUB_HEAD_REF
    - name: store changed frameworks
      id: frameworks-diff
      run: |
      changed_frameworks=`git diff --name-only HEAD..$GITHUB_BASE_REF | grep -o -i -P 'frameworks/(?!shared).*/' | uniq | sed -e 's/frameworks//' -e 's/\///g'`
      (( ${#changed_files} > 0 ))
      frameworks_changed=$?
      echo "::set-output name=changed_frameworks::$changed_frameworks"
      echo "::set-output name=frameworks_changed::$frameworks_changed"

  benchmark_changes:
    name: Detect Benchmark Changes
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.count-changes.outputs.files_changed }}
    steps:
      - uses: actions/checkout@v2
      - name: pull base branch
        run: |
          git fetch --all
          git checkout -b $GITHUB_BASE_REF origin/$GITHUB_BASE_REF
          git checkout $GITHUB_HEAD_REF
      - name: detect edited files
        id: count-changes
        run: |
        changed_files=`git diff --name-only HEAD..$GITHUB_BASE_REF | grep -o -i -P '(amlb|runbenchmark|frameworks/shared|requirements)'`
        (( ${#changed_files} > 0 ))
        files_changed=$?
        echo "::set-output name=files_changed::$files_changed"

  echo-framework-changed:
    runs-on: ubuntu-latest
    needs: framework_changes
    if: ${{ needs.framework_changes.outputs.output2 == 0 }}
    steps:
    - run: echo ${{needs.framework_changes.outputs.output1}}

  echo-benchmark-changed:
    runs-on: ubuntu-latest
    needs: benchmark_changes
    if: ${{ needs.benchmark_changes.outputs.output1 == 0 }}
    steps:
    - run: echo ${{needs.benchmark_changes.outputs.output1}}

  baseline:
    name: Run Baseline If Benchmark Changed
    needs: changes
    if: contains(needs.changes.outputs.output1, 'autoxgboost')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
        framework: [autoxgboost]  # autogluon, gama, h2oautoml, mlplan, tpot, autosklearn,
        task: [bioresponse, dresses-sales, eucalyptus, internet-advertisements, micro-mass, kc1, APSFailure]
      fail-fast:  true  # not sure about this one, but considering the big workload it might be nicer

    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Task
        run: |
          python runbenchmark.py ${{ matrix.framework }} validation test -f 0 -t ${{ matrix.task }}

  autoxgboost:
    needs: changes
    if: contains(needs.framework_changes.outputs.output1, 'autoxgboost')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
        framework: [autoxgboost]  # autogluon, gama, h2oautoml, mlplan, tpot, autosklearn,
        task: [bioresponse, dresses-sales, eucalyptus, internet-advertisements, micro-mass, kc1, APSFailure]
      fail-fast:  true  # not sure about this one, but considering the big workload it might be nicer

    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          pip-
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Requirements
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run Task
      run: |
        python runbenchmark.py ${{ matrix.framework }} validation test -f 0 -t ${{ matrix.task }}

  autosklearn:
    # steps.changed-my-tools.outputs.changed == 'true'
    # contains(github.ref, 'develop')
    needs: changes
    if: contains(needs.framework_changes.outputs.output1, 'autosklearn')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
        framework: [autosklearn]
        task: [bioresponse, dresses-sales, eucalyptus, internet-advertisements, micro-mass, kc1, APSFailure]
      fail-fast:  true  # not sure about this one, but considering the big workload it might be nicer

    steps:
    - uses: actions/checkout@v2
    - name: Setup Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - uses: ./.github/actions/runbenchmark
      with:
        framework: autosklearn
        task: ${{ matrix.task }}
